# 프로그래머스 / 괄호 변환 (공통)
# 제출

def solution(p):
    if len(p) == 0:
        return ''
    
    n = list(p)
    cnt = 0
    for i in range(len(n)):
        if n[i] == '(':
            cnt += 1
        else:
            cnt -= 1

        # '(' 와 ')' 갯수가 동일 할 때,
        if cnt == 0:
            # v,u로 나누고 나머지는 또 재귀를 통해 분리
            v = solution(n[i+1:])
            u = n[:i+1]
            # '(' 로 시작 하지 않거나 ')'로 끝나지 않으면 올바른 문자열이 아니므로 4번 실행
            if u[0] != '(' or u[-1] != ')':
                for j in range(1,len(u)-1):
                    if u[j] == ')':
                        u[j] = '('
                    else:
                        u[j] = ')'
                return '(' + "".join(v) + ')' + "".join(u[1:-1])
            # 올바른 문자열 일 경우 3번 실행
            return "".join(u) + "".join(v)
        
#3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
  #3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
  
#4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
  #4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  #4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  #4-3. ')'를 다시 붙입니다. 
  #4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  #4-5. 생성된 문자열을 반환합니다.

#정확성  테스트
#테스트 1 〉	통과 (0.01ms, 9.98MB)
#테스트 2 〉	통과 (0.01ms, 10MB)
#테스트 3 〉	통과 (0.01ms, 10.2MB)
#테스트 4 〉	통과 (0.01ms, 10.2MB)
#테스트 5 〉	통과 (0.02ms, 10.2MB)
#테스트 6 〉	통과 (0.01ms, 10.2MB)
#테스트 7 〉	통과 (0.02ms, 9.98MB)
#테스트 8 〉	통과 (0.02ms, 10.1MB)
#테스트 9 〉	통과 (0.03ms, 10MB)
#테스트 10 〉	통과 (0.02ms, 10.3MB)
#테스트 11 〉	통과 (0.03ms, 10.1MB)
#테스트 12 〉	통과 (0.04ms, 10MB)
#테스트 13 〉	통과 (0.04ms, 10MB)
#테스트 14 〉	통과 (0.11ms, 10.2MB)
#테스트 15 〉	통과 (0.16ms, 10MB)
#테스트 16 〉	통과 (0.70ms, 10.3MB)
#테스트 17 〉	통과 (0.27ms, 10.1MB)
#테스트 18 〉	통과 (0.63ms, 10.3MB)
#테스트 19 〉	통과 (1.33ms, 10.8MB)
#테스트 20 〉	통과 (1.24ms, 10.3MB)
#테스트 21 〉	통과 (0.34ms, 10.1MB)
#테스트 22 〉	통과 (0.21ms, 10.3MB)
#테스트 23 〉	통과 (0.81ms, 10.2MB)
#테스트 24 〉	통과 (0.12ms, 10.2MB)
#테스트 25 〉	통과 (0.30ms, 10.2MB)